---
service: tutorialedge-rest-api

provider:
  name: aws
  runtime: go1.x
  region: eu-west-1
  memorySize: 512

plugins:
  - serverless-prune-plugin
custom:
  # This prunes the storage buckets to ensure that we
  # don't face bucket size issues
  prune:
    automatic: true
    includeLayers: true
    number: 3

layers:
  go:
    package:
      artifact: ./code/go.zip

# What to include in the deployed package
# for each lambda
package:
  exclude:
  - ./**
  include:
  - ./bin/**
  - ./code/**

functions:
  # health endpoint which allows us to verify what version
  # of the service is deployed based on Travis Build Number
  health:
    handler: bin/health
    environment:
        TRAVIS_BUILD_NUMBER: ${env:TRAVIS_BUILD_NUMBER}
    events:
    - http:
        path: /
        method: get

  # achievements endpoint which allows a user to retrieve their 
  # achievements on the site
  achievements:
    handler: bin/achievements
    events:
    - http:
        path: /achievements
        method: get
  
  # comments endpoints which allow users to post comments
  # to the site
  comments:
    handler: bin/comments
    environment:
        API_AUDIENCE_ID: ${env:API_AUDIENCE_ID}
        AUTH0_SIGNING_KEY: ${env:AUTH0_SIGNING_KEY}
        DB_USERNAME: ${env:DB_USERNAME}
        DB_PASSWORD: ${env:DB_PASSWORD}
        DB_HOST: ${env:DB_HOST}
        DB_TABLE: ${env:DB_TABLE}
        MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}
    events:
    - http:
        path: /v1/comments
        method: get
        cors: true
    - http:
        path: /v1/comments
        method: post
        cors: true
    - http:
        path: /v1/comments
        method: put
        cors: true
    - http:
        path: /v1/comments
        method: delete
        cors: true
  
  # challenges endpoint allows us to update a user
  # profile and highlight what challenges they have finished
  challenges:
    handler: bin/challenge
    events:
    - http:
        path: /v1/challenges
        method: get
    - http:
        path: /v1/challenges
        method: post
    - http:
        path: /v1/challenges
        method: put
    - http:
        path: /v1/challenges
        method: delete

  # users endpoints which return the user details for the 
  # profile page. 
  users:
    handler: bin/users
    environment:
        API_AUDIENCE_ID: ${env:API_AUDIENCE_ID}
        AUTH0_SIGNING_KEY: ${env:AUTH0_SIGNING_KEY}
        DB_USERNAME: ${env:DB_USERNAME}
        DB_PASSWORD: ${env:DB_PASSWORD}
        DB_HOST: ${env:DB_HOST}
        DB_TABLE: ${env:DB_TABLE}
        MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}
    events:
    - http:
        path: /v1/user
        method: get
        cors: true
    - http:
        path: /v1/user
        method: post
        cors: true
  
  # execute-go endpoint allows the execution of go code
  # within the snippets portion of the site. This is executed 
  # in a private VPC to disable network connectivity
  execute-go:
    handler: bin/code
    timeout: 30
    layers:
      - { Ref: GoLambdaLayer }
    vpc:
      securityGroupIds:
        - sg-0f7b6fded566b53bf
      subnetIds:
        - subnet-0cbb13cb6e95802a5 
    events:
    - http:
        path: /v1/executego
        method: post
        cors: true

  # execute-python endpoint allows the execution of python code
  # within the snippets portion of the site. This is executed 
  # in a private VPC to disable network connectivity
  execute-python:
    handler: bin/code
    timeout: 30
    vpc:
      securityGroupIds:
        - sg-0f7b6fded566b53bf
      subnetIds:
        - subnet-0cbb13cb6e95802a5 
    events:
    - http:
        path: /v1/executepython
        method: post
        cors: true

  # challenge-go endpoint takes in the code and the object containing
  # the tests which are to be executed against the code and returns
  # the response
  challenge-go:
    handler: bin/challenge
    timeout: 30
    layers:
      - { Ref: GoLambdaLayer }
    vpc:
      securityGroupIds:
        - sg-0f7b6fded566b53bf
      subnetIds:
        - subnet-0cbb13cb6e95802a5 
    events:
    - http:
        path: /v1/challengego
        method: post
        cors: true      

  # TODO: Deprecate
  code:
    handler: code/code.lambda_handler
    runtime: python3.6
    timeout: 900
    vpc:
      securityGroupIds:
        - sg-0f7b6fded566b53bf
      subnetIds:
        - subnet-0cbb13cb6e95802a5 
    events:
    - http:
        path: /v1/code
        method: post
        cors: true
  
  # TODO: needs implemented for the forum system
  posts:
    handler: bin/posts
    environment:
        API_AUDIENCE_ID: ${env:API_AUDIENCE_ID}
        AUTH0_SIGNING_KEY: ${env:AUTH0_SIGNING_KEY}
        DB_USERNAME: ${env:DB_USERNAME}
        DB_PASSWORD: ${env:DB_PASSWORD}
        DB_HOST: ${env:DB_HOST}
        DB_TABLE: ${env:DB_TABLE}
        MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}
    events:
    - http:
        path: /v1/posts
        method: get
    - http:
        path: /v1/posts
        method: post
    - http:
        path: /v1/posts
        method: put
    - http:
        path: /v1/posts
        method: delete